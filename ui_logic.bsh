// TODO: Sites should be save immediately after creation, else measurements will
//       not be saved properly.

/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;

User user;
String userid;
String username;
entity_id = null;
photolog_id = null;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
}
makeLocalID();





/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    userid = null;
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("Users/Login/Author_List", result);
        }
    });
}

login() {
    userid = getListItemValue();
    fetchOne("SELECT userid,fname,lname,email FROM user where userid='" + userid + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("Project");
        }
    });
}

populateControlTabGroup() {
    if (userid == null) userid = getListItemValue(); // userid will only be null on first login (and subsequent accesses of the login tabgroup)

    //don't write your own query here. Use the search queries from csiro.

}

/** Action Bar **/

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Sync_Enabled}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Sync_Disabled}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});



createAndPopulateSite() {
    entity_id = null;
    newTabGroup("Site");

    siteCode   = getFieldValue("Project/Main/Site_Code");
    siteNumber = getFieldValue("Project/Main/Site_Number");
    team       = getFieldValue("Project/Main/Team_Members");
    setFieldValue("Site/Site_Recording/Author"      , username);
    setFieldValue("Site/Site_Recording/Site_Code"   , siteCode);
    setFieldValue("Site/Site_Recording/Site_Number" , siteNumber);
    setFieldValue("Site/Site_Recording/Team"        , team);
    setTimestamp( "Site/Site_Recording/Created_At");
   
    //take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    setSiteStartingID(Integer.toString(Integer.parseInt(siteNumber) + 1));
}

//setSitePrefix(String samplePrefix) {
    //setFieldValue("Project/Start/Sample_Prefix", samplePrefix);
    //fetchOne("REPLACE INTO localSettings(key, value) VALUES('Sample Prefix', '" + samplePrefix + "');", null);
//}

setSiteStartingID(String siteStartingID) {
    setFieldValue("Project/Main/Site_Number", siteStartingID);
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Site_Number', '" + siteStartingID + "');", null);
}

/* Loads the sample starting ID if one exists, otherwise defaults to '1'. */
loadSiteStartingID() {
    //fetchOne("SELECT value FROM localSettings WHERE key = 'Sample Starting ID';", new FetchCallback() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Site_Number';", new FetchCallback() {
        onFetch(result) {
            Log.v("", "[loadSiteStartingID()] fetched sample ID from localSettings: " + result);
            if (isNull(result)) {
                siteStartingID = "1";
                setSiteStartingID(siteStartingID);
            } else {
                siteStartingID = result.get(0);
                setFieldValue("Project/Main/Site_Number", siteStartingID);
                Log.v("", "[loadSiteStartingID()] set sample starting ID to: " + siteStartingID);
            }
        }
    });
}

populateMain() {
    //newTabGroup("bettong");
    setFieldValue("Project/Main/Author", username);
    loadSiteStartingID(); //take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    updateGPSStatus();
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

fillInGPS() {
    location = getGPSPosition();
    locationProj = getGPSPositionProjected();
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        showWarning("{Err_Loc}", "{Err_Con}");
        return;
    }
    if (location == null){
        showWarning("{Err_Loc}", "{Err_Sig}");
        return;
    }

    tab = "Site/Site_Recording/";
    acc = getGPSEstimatedAccuracy();
    hea = getGPSHeading();
    lat = location.getLatitude();
    lon = location.getLongitude();
    nor = locationProj.getLatitude();
    eas = locationProj.getLongitude();
    setFieldValue(tab + "Latitude"  , lat);
    setFieldValue(tab + "Longitude" , lon);
    setFieldValue(tab + "Northing"  , nor);
    setFieldValue(tab + "Easting"   , eas);
    setFieldValue(tab + "Accuracy"  , nor);
    setFieldValue(tab + "Heading"   , hea);
}

/* Creates sidebar navigation for the sample. */
addSampleNavigation() {
    // tabgroup = getSampleTypePath();
    removeNavigationButton("new");
    removeNavigationButton("duplicate");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Site}";
        }
        actionOn() {
            // print("[Sidebar New Sample] Attempting to make a new sample");
            // if(!isNull(currentSampleUUID)) {
            //     newSample();
            //     autoSaveSample();

            // } else {
            //     String newSampleLogic = "newSample();" + "autoSaveSample();";
            //     showAlert("{Warning}", "{Lose_Unsaved_Changes}!", newSampleLogic, "");
            // }
        }
    }, "success");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "{Duplicate_Site}";
        }
        actionOn() {
            // if(!isNull(currentSampleUUID)) {
            //     // duplicateSample();
            //     dupeSample3();
            // } else {
            //     showWarning("{Warning}", "{Sample_Not_Duplicated}");
            // }
        }
    }, "primary");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Site}";
        }
        actionOn() {
            // deleteSample();
        }
    }, "danger");    

}

/* Removes sidebar buttons. */
removeNavigationButtons() {
    removeNavigationButton("new");
    removeNavigationButton("duplicate");
    removeNavigationButton("delete");
}

updateGPSStatus() {
    String status = "";
    String previousStatus = getFieldValue("Project/Main/GPS_Diagnostics");
    String notInitialised = "GPS is not initialised";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            String error = "GPS is no longer initailised. Previous status:";
            // check that error message wasn't previously appended to the previous status message.
            if (previousStatus.subSequence(0, error.length()).equals(error)) {
                status = previousStatus;
            } else {
                Log.d("", "[updateGPSStatus] Previous status subSequence: " + previousStatus.subSequence(0, error.length()-1));
                status = error + "\n" + previousStatus;
            }
        } else {
            status = notInitialised;
        }
    } else {
        status += "Internal GPS: ";
        if (isInternalGPSOn())
        {
            status += "on";
        } else {
            status += "off";
        }
        status += "\nExternal GPS: ";
        if (isExternalGPSOn())
        {
            if (isBluetoothConnected()) {
                status += "on and bluetooth connected";
            } else {
                status += "on and bluetooth disconnected";
            }
        } else {
            status += "off";
        }
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\nLatitude: " + position.getLatitude();
            status += "   Longitude: " + position.getLongitude();
            status += "\nNorthing: " + projPosition.getLatitude();
            status += "   Easting: " + projPosition.getLongitude();
            status += "\nAccuracy: " + getGPSEstimatedAccuracy();
            // status += "\n Heading: " + getGPSHeading();
        } else {
            status += "\nPosition: no GPS position could be found";
        }
    }
    Log.v("", "[updateGPSStatus()] GPS status: " + status);
    setFieldValue("Project/Main/GPS_Diagnostics", status);
}

saveSite() {
    enable_autosave = true;
    //keepTabGroupChanges("Site");
    saveTabGroup("Site", entity_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
            entity_id = uuid;
            if(newRecord) {
                showToast("{New_Record_Created}");
            }
            Log.d("saveSite", "saving");
        }
    },
    enable_autosave);
}

populateSiteCode() {
    userid = null;
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

makeVocab(String type, String path, String attrib){
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

loadSites() {
    type = "Site";
    populateCursorList(
            "Project/Records/All_Site_Records",
            "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;",
            25);
}

loadSite() {
    entity_id = getListItemValue();
    showTabGroup("Site", entity_id);
}

/******************************************************************************/
/*                                  PHOTOLOG                                  */
/******************************************************************************/

onEvent("Photolog", "show", "addPhotologNavigation();");
onFocus("Photolog/Photolog/ID", null, "activateAutoSavePhotolog();");
onEvent("Photolog/Photolog/Photo_Back", "click", "cancelTabGroup(\"Photolog\", false); showTab(\"Site/Photolog\");");
onEvent("Site/Photolog/List_Of_External_Photos", "click", "loadPhotolog();");

/* Populates the photolog list with the existing photologs linked to the given sample ID. */
loadRelatedPhotologs(String related_sample_id) {
    if(!isNull(related_sample_id)) {
        fetchAll("SELECT uuid, response " +
                "FROM latestNonDeletedArchEntFormattedIdentifiers " +
                "WHERE aenttypename = 'External_Photo' " +
                "AND uuid IN  (select uuid " +
                "FROM latestNonDeletedAentReln " +
                    "WHERE relationshipid in (SELECT relationshipid " +
                        "FROM latestNonDeletedAentReln " +
                        "JOIN relationship USING (relationshipid) " +
                        "JOIN relntype USING (relntypeid) " +
                        "WHERE uuid = "+related_sample_id + " " +
                        "AND relntypeName = 'Site-External_Photo') " +
                        "AND uuid != "+related_sample_id+");",  new FetchCallback() {
                onFetch(result) {
                    if(isNull(result)) {
                        result = new ArrayList();
                        result.add(new NameValuePair("{No_Records_Found}", ""));
                    }
                    populateList("Site/Photolog/List_Of_External_Photos", result);
                }
                onError(message) {
                    showToast(message);
                }
            });     
    } else {
        result = new ArrayList();
        result.add(new NameValuePair("{No_Records_Found}", ""));
        populateList("Site/Photolog/List_Of_External_Photos", result);
    }    
}

/* Make a new log, somewhere in the forest, which has a knack for taking pictures */
newPhotolog() {
    newTabGroup("Photolog");
    photolog_id = null;
    setTimestamp("Photolog/Photolog/Timestamp");
}

savePhotolog() {
    if(!isNull(photolog_id) || isNull(getFieldValue("Photolog/Photolog/ID"))) return;

    enable_autosave = true;
    saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            photolog_id = uuid;
            saveEntitiesToRel("Site-External_Photo", entity_id, photolog_id);
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                }
            }, enable_autosave);
        }
    });
}

/* Loads a photolog based on the most recent list item selected. */
loadPhotolog() {
    photolog_id = getListItemValue();
    print("[loadPhotolog()] photolog list item value null status: " + isNull(photolog_id));
    print("[loadPhotolog()] Using photolog list item value as photolog_id: " + photolog_id);
    if (!isNull(photolog_id)) {
        loadPhotologFrom(photolog_id);
    }
}

/* Loads a photolog based on the given ID. */
loadPhotologFrom(archentid) {
    if (isNull(archentid)) {
        showToast("{No_Photolog_Selected}");
        return;
    }

    enable_autosave = true;
    showTabGroup("Photolog", archentid, new FetchCallback() {
        onFetch(result) {
            photolog_id = archentid;
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                }
            }, enable_autosave);
        }
    });
}

/* Generates a confirmation to delete the current photolog */
deletePhotolog() {
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_To_Delete} {Photolog}!", "reallyDeletePhotolog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photolog", true);
    }
}

/* Deletes the current photolog. */
reallyDeletePhotolog() {
    deleteArchEnt(photolog_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Photolog", false);
            showTab("Site/Photolog");
        }
    });
}

/* Creates sidebar navigation buttons for the photolog. */
addPhotologNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Photolog}";
        }
        actionOn() {
            if(!isNull(photolog_id)) {
                newPhotolog();
            } else {
                showAlert("{Warning}", "{Lose_Unsaved_Changes}!", "newPhotolog()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Photolog}";
        }
        actionOn() {
            deletePhotolog();
        }
    }, "danger");
}

/******************************************************************************/
/*                                MEASUREMENTS                                */
/******************************************************************************/

ph_count = 0;
preferred_ph = null;

onEvent("Site/Measurements", "show", "renderpHEhPage();");

/* Renders the pH/Eh tab using dynamic UI. */
renderpHEhPage() {
    executeViewTask(new ViewTask() {
        doTask() {
            o = "orientation";
            e = "even";
            removeAllViewsAndContainers("Site");
            createContainer("Site/Measurements/container3"   , o);
            createContainer("Site/Measurements/pH_Container" , e   , "Site/Measurements/container3");

            ph_count = 0;
            ArrayList ph_list = new ArrayList();

            fetchAll("select uuid, response " +
                     "from latestnondeletedarchentformattedidentifiers " +
                     "where uuid in (select b.uuid " +
                     "from latestnondeletedaentreln a " +
                     "join (latestnondeletedaentreln b " +
                     "join relationship using (relationshipid) " +
                     "join relntype using (relntypeid)) on (a.uuid != b.uuid and a.relationshipid = b.relationshipid) " +
                     "where relntypename='Site-Measurement' " +
                     "and a.uuid = " + entity_id + "); ", new FetchCallback() {
                        onFetch(ph_list) {
                            //print(ph_list);

                            for(ph : ph_list) {
                                String ph_id    = ph.get(0);
                                String ph_value = ph.get(1);
                                makePhRow(
                                    ph_id,
                                    ph_value,
                                    ph_count + "" // Implicit type conversion
                                );
                                ph_count++;
                            }

                            onEvent("Site/Measurements/Add_A_Measurement", "delayclick", "addNewpH();");
                        }
                        onError(message) {
                            showToast(message);
                        }

                    });
        }
    });
}

/* Adds a new pH value, saves the entity and updates the dynamic UI. */
addNewpH() {
    measurementField    = getFieldValue("Site/Measurements/Measurement_Field");
    measurementTypeId   = getFieldValue("Site/Measurements/Measurement_Type");
    measurementTypeName = "";     // Gotta set this with the fetchOne call below
    if(isNull(measurementField)) {
        showToast("{Please_Fill_In_PH}");
        return;
    }

    fetchOne("select vocabname from vocabulary where vocabid = " + measurementTypeId, new FetchCallback() {
        onFetch(result) {
            measurementTypeName = result.get(0);
        }
        onError(message) {
            showToast(message);
        }
    });


    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Measurement_Type"  , null , measurementTypeId , null             , null));
    attributes.add(createEntityAttribute("Measurement_Field" , null , null              , measurementField , null));

    saveArchEnt(null, "Measurement", null, attributes, new SaveCallback() {
        onSave(ph_id, newRecord) {
            saveEntitiesToRel("Site-Measurement", entity_id, ph_id);

            String ph_value = measurementTypeName + ": " + measurementField;
            makePhRow(
                ph_id,
                ph_value,
                ph_count + "" // Implicit type conversion
            );
            ph_count++;

            onEvent("Site/Measurements/Add_A_Measurement", "delayclick", "addNewpH();");
        }
    });
}

makePhRow(String ph_id, String ph_value, String ph_count) {
    o = "orientation";
    e = "even";

    tab    = "Site/Measurements/";
    field  = createViewDef().createTextField("decimal").setReadOnly(true);
    button = createViewDef().createButton().setLabel("X").setStyleCss("faims-danger");

    createContainer(tab + "pH_Row_"              + ph_count , o      , tab + "pH_Container");
    createContainer(tab + "pH_Value_Container_"  + ph_count , e      , tab + "pH_Row_"              + ph_count);
    createContainer(tab + "Delete_pH_Container_" + ph_count , e      , tab + "pH_Row_"              + ph_count);
    createView(     tab + "pH_Value_"            + ph_count , field  , tab + "pH_Value_Container_"  + ph_count);
    createView(     tab + "Delete_pH_"           + ph_count , button , tab + "Delete_pH_Container_" + ph_count);

    setFieldValue("Site/Measurements/pH_Value_" + ph_count, ph_value);
    onEvent("Site/Measurements/Delete_pH_" + ph_count, "click", "deletepH(\"" + ph_id + "\", \"" + ph_count + "\");");

    refreshTabgroupCSS("Site");
}

/* Generates a confirmation prompt to delete the given pH. */
deletepH(String ph_id, String ph_index) {
    showAlert(
        "{Confirm_Deletion}",
        "{Press_To_Delete} {pH}!",
        "reallyDeletepH(\"" + ph_id + "\", \"" + ph_index + "\")",
        "doNotDelete()"
    );
}

/* Deletes the given pH. */
reallyDeletepH(String ph_id, String ph_index) {
    deleteArchEnt(ph_id, new DeleteCallback() {
        onDelete(uuid) {
            removeContainer("Site/Measurements/pH_Row_" + ph_index);
            removeContainer("Site/Measurements/pH_Value_Container_" + ph_index);
            removeContainer("Site/Measurements/Delete_pH_Container_" + ph_index);
            removeView("Site/Measurements/pH_Value_" + ph_index);
            removeView("Site/Measurements/Delete_pH_" + ph_index);
            //showTab("Site/Measurements");
        }
    });
}

doNotDelete() {
    showToast("{Delete_Cancelled}");
}

/******************************************************************************/
/*                                   PHOTOS                                   */
/******************************************************************************/
onEvent(
        "Site/Site_Recording/Take_Photo",
        "click",
        "attachPictureTo(\"Site/Site_Recording/Photos\")"
);

/******************************************************************************/
/*                                  SKETCHES                                  */
/******************************************************************************/
onEvent(
        "Site/Site_Recording/Attach_Sketch",
        "click",
        "attachFileTo(\"Site/Site_Recording/Sketches\");"
);
onEvent(
        "Site/Site_Recording/View_Sketch",
        "click",
        "viewArchEntAttachedFiles(entity_id);"
);

/******************************************************************************/
/*                                    MISC                                    */
/******************************************************************************/

saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}




// These should go in functions so we can see what's populating what.
makeVocab("CheckBoxGroup" , "Site/Site_Recording/Cultural_Material_Present" , "Cultural_Material_Present");
//makeVocab("CheckBoxGroup" , "Site/Site_Recording/Sketches"                  , "Sketches");
makeVocab("DropDown"      , "Site/Site_Recording/Current_Land_Use"          , "Current_Land_Use");
makeVocab("DropDown"      , "Site/Site_Recording/Disturbance"               , "Disturbance");
makeVocab("DropDown"      , "Site/Site_Recording/Ground_Visibility"         , "Ground_Visibility");
makeVocab("DropDown"      , "Site/Site_Recording/Landscape"                 , "Landscape");
makeVocab("DropDown"      , "Site/Site_Recording/Sampling_Method"           , "Sampling_Method");
makeVocab("DropDown"      , "Site/Site_Recording/Site_Type"                 , "Site_Type");
makeVocab("DropDown"      , "Site/Site_Recording/Surface_Geomorphology"     , "Surface_Geomorphology");
makeVocab("DropDown"      , "Site/Site_Recording/Vegetation"                , "Vegetation");
makeVocab("RadioGroup"    , "Site/Site_Recording/Site_Significance"         , "Site_Significance");
populateHierarchicalDropDown("Site/Measurements/Measurement_Type"           , "Measurement_Type");

startInternalGPS();
setSyncEnabled(true);
// onEvent("control/control/", "show", "populateControlTabGroup()");
// onEvent("control/control/buttonNewRecord",  "click", "createEntityAndPopulateBettong()");
// onEvent("control/control/savedRecords", "click", "loadEntityAndPopulateBettong()");
onEvent("Project/Main"                        , "show"  , "addSampleNavigation(); populateMain(); loadSites(); ");
onEvent("Project/Main/Record_Site"            , "click" , "createAndPopulateSite(); ");
onEvent("Site"                                , "show"  , "saveSite()");
onEvent("Site/Photolog/Record_External_Photo" , "click" , "showTabGroup(\"Photolog\")");
onEvent("Site/Site_Recording/Take_From_GPS"   , "click" , "fillInGPS()");
onEvent("Users/Login"                         , "show"  , "loadUsers()");
onEvent("Users/Login/Author_List"             , "click" , "login()");

onEvent("Project/Records/All_Site_Records"    , "click" , "loadSite();");

onEvent("Site/Photolog"                       , "show"  , "loadRelatedPhotologs(entity_id)");
onEvent("Site/Photolog/Record_External_Photo" , "click" , "newPhotolog()");
onFocus("Photolog/Photolog/ID"                , null    , "savePhotolog()");
