/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;

User user; // don't touch
String userid;
String username;
entity_id = null;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
}
makeLocalID();





/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    userid = null;
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("Users/Login/Author_List", result);
        }
    });
}

login() {
    userid = getListItemValue();
    fetchOne("SELECT userid,fname,lname,email FROM user where userid='" + userid + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("Project");
        }
    });
}

populateControlTabGroup() {
    if (userid == null) userid = getListItemValue(); // userid will only be null on first login (and subsequent accesses of the login tabgroup)

    //don't write your own query here. Use the search queries from csiro.

}

/** Action Bar **/

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Sync_Enabled}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Sync_Disabled}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});



createAndPopulateSite() {
    entity_id = null;
    saveSite();

    siteCode   = getFieldValue("Project/Main/Site_Code");
    siteNumber = getFieldValue("Project/Main/Site_Number");
    team       = getFieldValue("Project/Main/Team_Members");
    setFieldValue("Site/Site_Recording/Author"      , username);
    setFieldValue("Site/Site_Recording/Site_Code"   , siteCode);
    setFieldValue("Site/Site_Recording/Site_Number" , siteNumber);
    setFieldValue("Site/Site_Recording/Team"        , team);
    setTimestamp( "Site/Site_Recording/Created_At");

    //take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    setSiteStartingID(Integer.toString(Integer.parseInt(siteNumber) + 1));
}

//setSitePrefix(String samplePrefix) {
    //setFieldValue("Project/Start/Sample_Prefix", samplePrefix);
    //fetchOne("REPLACE INTO localSettings(key, value) VALUES('Sample Prefix', '" + samplePrefix + "');", null);
//}

setSiteStartingID(String siteStartingID) {
    setFieldValue("Project/Main/Site_Number", siteStartingID);
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Site_Number', '" + siteStartingID + "');", null);
}

/* Loads the sample starting ID if one exists, otherwise defaults to '1'. */
loadSiteStartingID() {
    //fetchOne("SELECT value FROM localSettings WHERE key = 'Sample Starting ID';", new FetchCallback() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Site_Number';", new FetchCallback() {
        onFetch(result) {
            Log.v("", "[loadSiteStartingID()] fetched sample ID from localSettings: " + result);
            if (isNull(result)) {
                siteStartingID = "1";
                setSiteStartingID(siteStartingID);
            } else {
                siteStartingID = result.get(0);
                setFieldValue("Project/Main/Site_Number", siteStartingID);
                Log.v("", "[loadSiteStartingID()] set sample starting ID to: " + siteStartingID);
            }
        }
    });
}

populateMain() {
    //newTabGroup("bettong");
    setFieldValue("Project/Main/Author", username);
    loadSiteStartingID(); //take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    updateGPSStatus();
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

loadEntityAndPopulateBettong() {
    entity_id = getListItemValue();
    showTabGroup("bettong", entity_id);
}

fillInGPS() {
    location = getGPSPosition();
    locationProj = getGPSPositionProjected();
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        showWarning("{Err_Loc}", "{Err_Con}");
        return;
    }
    if (location == null){
        showWarning("{Err_Loc}", "{Err_Sig}");
        return;
    }

    tab = "Site/Site_Recording/";
    acc = getGPSEstimatedAccuracy();
    hea = getGPSHeading();
    lat = location.getLatitude();
    lon = location.getLongitude();
    nor = locationProj.getLatitude();
    eas = locationProj.getLongitude();
    setFieldValue(tab + "Latitude"  , lat);
    setFieldValue(tab + "Longitude" , lon);
    setFieldValue(tab + "Northing"  , nor);
    setFieldValue(tab + "Easting"   , eas);
    setFieldValue(tab + "Accuracy"  , nor);
    setFieldValue(tab + "Heading"   , hea);
}

String getSampleTypePath() {
    String tabgroup = null;
    String type = getSampleType();
    if(type.equals("Water Sample")) {
        tabgroup = "Water_Sample";
    } else if(type.equals("Plant Sample")) {
        tabgroup = "Plant_Sample";
    } else if(type.equals("Soil Sample")) {
        tabgroup = "Soil_Sample";
    } else if(type.equals("Rock Sample")) {
        tabgroup = "Rock_Sample";
    }
    Log.d("", "[getSampleTypePath()] Tabgroup is: " + tabgroup);
    return tabgroup;
}

/* Creates sidebar navigation for the sample. */
addSampleNavigation() {
    // tabgroup = getSampleTypePath();
    removeNavigationButton("new");
    removeNavigationButton("duplicate");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Site}";
        }
        actionOn() {
            // print("[Sidebar New Sample] Attempting to make a new sample");
            // if(!isNull(currentSampleUUID)) {
            //     newSample();
            //     autoSaveSample();

            // } else {
            //     String newSampleLogic = "newSample();" + "autoSaveSample();";
            //     showAlert("{Warning}", "{Lose_Unsaved_Changes}!", newSampleLogic, "");
            // }
        }
    }, "success");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "{Duplicate_Site}";
        }
        actionOn() {
            // if(!isNull(currentSampleUUID)) {
            //     // duplicateSample();
            //     dupeSample3();
            // } else {
            //     showWarning("{Warning}", "{Sample_Not_Duplicated}");
            // }
        }
    }, "primary");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Site}";
        }
        actionOn() {
            // deleteSample();
        }
    }, "danger");    

}

/* Removes sidebar buttons. */
removeNavigationButtons() {
    removeNavigationButton("new");
    removeNavigationButton("duplicate");
    removeNavigationButton("delete");
}

updateGPSStatus() {
    String status = "";
    String previousStatus = getFieldValue("Project/Main/GPS_Diagnostics");
    String notInitialised = "GPS is not initialised";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            String error = "GPS is no longer initailised. Previous status:";
            // check that error message wasn't previously appended to the previous status message.
            if (previousStatus.subSequence(0, error.length()).equals(error)) {
                status = previousStatus;
            } else {
                Log.d("", "[updateGPSStatus] Previous status subSequence: " + previousStatus.subSequence(0, error.length()-1));
                status = error + "\n" + previousStatus;
            }
        } else {
            status = notInitialised;
        }
    } else {
        status += "Internal GPS: ";
        if (isInternalGPSOn())
        {
            status += "on";
        } else {
            status += "off";
        }
        status += "\nExternal GPS: ";
        if (isExternalGPSOn())
        {
            if (isBluetoothConnected()) {
                status += "on and bluetooth connected";
            } else {
                status += "on and bluetooth disconnected";
            }
        } else {
            status += "off";
        }
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\nLatitude: " + position.getLatitude();
            status += "   Longitude: " + position.getLongitude();
            status += "\nNorthing: " + projPosition.getLatitude();
            status += "   Easting: " + projPosition.getLongitude();
            status += "\nAccuracy: " + getGPSEstimatedAccuracy();
            // status += "\n Heading: " + getGPSHeading();
        } else {
            status += "\nPosition: no GPS position could be found";
        }
    }
    Log.v("", "[updateGPSStatus()] GPS status: " + status);
    setFieldValue("Project/Main/GPS_Diagnostics", status);
}

saveSite() {
    enable_autosave = true;
    saveTabGroup("Site", entity_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
            entity_id = uuid;
            if(newRecord) {
                showToast("{New_Record_Created}");
            }
        }
    },
    enable_autosave);
}

populateSiteCode() {
    userid = null;
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

makeVocab(String type, String path, String attrib){
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

loadSites() {
    type = "Site";
    populateCursorList(
            "Project/Records/All_Site_Records",
            "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;",
            25);
}

loadSite() {
    entity_id = getListItemValue();
    showTabGroup("Site", entity_id);
}


/* ************************************************************************** */
/*** pH/Eh ***/

ph_count = 0;
preferred_ph = null;

onEvent("Water_Sample/pH_Eh", "show", "renderpHEhPage();");

/*********************************************************************************\
 *                                                                               *
 * WARNING: Do NOT re-use the following renderpHEhPage() code in future modules. *
 *                                                                               *
\*********************************************************************************/

/* Renders the pH/Eh tab using dynamic UI. */
renderpHEhPage() {
    executeViewTask(new ViewTask() {
        doTask() {
            removeAllViewsAndContainers("Water_Sample");
            style1 = "orientation";
            style2 = "even";
            createContainer("Water_Sample/pH_Eh/container3", "orientation");
            createContainer("Water_Sample/pH_Eh/child1", "even", "Water_Sample/pH_Eh/container3");
            createContainer("Water_Sample/pH_Eh/pH_Container", "even", "Water_Sample/pH_Eh/child1");

            createContainer("Water_Sample/pH_Eh/child2", "even", "Water_Sample/pH_Eh/container3");
            createContainer("Water_Sample/pH_Eh/Eh_Container", "even", "Water_Sample/pH_Eh/child2");
            
            ph_count = 0;
            ArrayList ph_list = new ArrayList();
            fetchAll("select uuid, group_concat(measure,'|') " +
                    "from ( " +
                    "select uuid, measure, attributename, aentcountorder " +
                    "from latestnondeletedaentvalue " +
                    "join latestnondeletedarchent using (uuid) " +
                    "join aenttype using (aenttypeid) " +
                    "join idealaent using (aenttypeid, attributeid) " +
                    "join attributekey using (attributeid)  " +
                    "where aenttypename = 'pH' " +
                    "and attributename in ('pH', 'Time') " +
                    "and uuid in (select a.uuid " +
                    "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
                    "where a.uuid != b.uuid " +
                    "and b.uuid = "+ currentSampleUUID +") " +
                    "order by uuid, aentcountorder) " +
                    "group by uuid  " +
                    "order by uuid; ", new FetchCallback() {
                    onFetch(ph_list) {
                        print("[renderpHEhPage()] ph list: " + ph_list);
                        fetchAll("select uuid, group_concat(measure,'|') " +
                                "from ( " +
                                "select uuid, measure, attributename, aentcountorder " +
                                "from latestnondeletedaentvalue " +
                                "join latestnondeletedarchent using (uuid) " +
                                "join aenttype using (aenttypeid) " +
                                "join idealaent using (aenttypeid, attributeid) " +
                                "join attributekey using (attributeid)  " +
                                "where aenttypename = 'Eh' " +
                                "and attributename in ('Eh', 'Time') " +
                                "and uuid in (select a.uuid " +
                                "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
                                "where a.uuid != b.uuid " +
                                "and b.uuid = "+ currentSampleUUID +") " +
                                "order by uuid, aentcountorder) " +
                                "group by uuid " +
                                "order by uuid, aentcountorder; ",  new FetchCallback() {
                            onError(message) {
                                showToast(message);
                            }
                        });
                    }
                    onError(message) {
                        showToast(message);
                    }
                });
        }
    });
}

/********************************************************************************\
 *                                                                              *
 * WARNING: Do NOT re-use the previous renderpHEhPage() code in future modules. *
 *                                                                              *
\********************************************************************************/

/* Adds a new pH value, saves the entity and updates the dynamic UI. */
addNewpH(String ph_value) {
    if(isNull(ph_value)) {
        showToast("{Please_Fill_In_PH}");
        return;
    }
    List attributes = createAttributeList();
    ph_time = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z").format(new Date());
    attributes.add(createEntityAttribute("pH", null, null, ph_value, null));
    attributes.add(createEntityAttribute("Time", null, null, ph_time, null));

    saveArchEnt(null, "pH", null, attributes, new SaveCallback() {
        onSave(ph_id, newRecord) {
            saveEntitiesToRel("Water Sample pH", currentSampleUUID, ph_id);
            removeView("Water_Sample/pH_Eh/pH_Value_" + ph_count);
            removeView("Water_Sample/pH_Eh/New_pH");

            createContainer("Water_Sample/pH_Eh/pH_Row_" + ph_count, "orientation", "Water_Sample/pH_Eh/pH_Container");
            createContainer("Water_Sample/pH_Eh/Check_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createContainer("Water_Sample/pH_Eh/pH_Value_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createContainer("Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createView("Water_Sample/pH_Eh/Check_pH_" + ph_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_pH_Container_" + ph_count);
            createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/pH_Value_Container_" + ph_count);
            createView("Water_Sample/pH_Eh/Delete_pH_" + ph_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count);
            setFieldValue("Water_Sample/pH_Eh/pH_Value_" + ph_count, ph_value);

            int index = ph_count;
            onEvent("Water_Sample/pH_Eh/Check_pH_" + ph_count, "click", "setPreferredpH(\"" + ph_id + "\", \"" + ph_value + "\", \"" + ph_time + "\", " + ph_count + ");");
            onEvent("Water_Sample/pH_Eh/Delete_pH_" + ph_count, "click", "deletepH(\"" + ph_id + "\");");
            ph_count++;

            createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{pH}"), "Water_Sample/pH_Eh/child1");
            createView("Water_Sample/pH_Eh/New_pH", createViewDef().createButton().setLabel("{Add_New_pH}"), "Water_Sample/pH_Eh/child1");
            onEvent("Water_Sample/pH_Eh/New_pH", "delayclick", "addNewpH(getFieldValue(\"Water_Sample/pH_Eh/pH_Value_\" + ph_count));");
            refreshTabgroupCSS("Water_Sample");
        }
    });
}

/* Generates a confirmation prompt to delete the given pH. */
deletepH(String ph_id) {
    showAlert("{Confirm_Deletion}", "{Press_To_Delete} {pH}!", "reallyDeletepH(\"" + ph_id + "\")", "doNotDelete()");
}

/* Deletes the given pH. */
reallyDeletepH(String ph_id) {
    deleteArchEnt(ph_id, new DeleteCallback() {
        onDelete(uuid) {
            if(ph_id == preferred_ph) {
                preferred_ph = null;
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH", "");
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", "");
                setFieldValue("Water_Sample/Hidden/Preferred_pH_Time", "");
            }
            showTab("Water_Sample/Codes");
            showTab("Water_Sample/pH_Eh");
        }
    });
}









// These should go in functions so we can see what's populating what.
makeVocab("CheckBoxGroup" , "Site/Site_Recording/Cultural_Material_Present" , "Cultural_Material_Present");
makeVocab("CheckBoxGroup" , "Site/Site_Recording/Sketches"                  , "Sketches");
makeVocab("DropDown"      , "Site/Site_Recording/Current_Land_Use"          , "Current_Land_Use");
makeVocab("DropDown"      , "Site/Site_Recording/Disturbance"               , "Disturbance");
makeVocab("DropDown"      , "Site/Site_Recording/Ground_Visibility"         , "Ground_Visibility");
makeVocab("DropDown"      , "Site/Site_Recording/Landscape"                 , "Landscape");
makeVocab("DropDown"      , "Site/Site_Recording/Sampling_Method"           , "Sampling_Method");
makeVocab("DropDown"      , "Site/Site_Recording/Site_Type"                 , "Site_Type");
makeVocab("DropDown"      , "Site/Site_Recording/Surface_Geomorphology"     , "Surface_Geomorphology");
makeVocab("DropDown"      , "Site/Site_Recording/Vegetation"                , "Vegetation");
makeVocab("RadioGroup"    , "Site/Site_Recording/Site_Significance"         , "Site_Significance");
populateHierarchicalDropDown("Site/Measurements/Measurement_Type"           , "Measurement_Type");

startInternalGPS();
setSyncEnabled(true);
// onEvent("control/control/", "show", "populateControlTabGroup()");
// onEvent("control/control/buttonNewRecord",  "click", "createEntityAndPopulateBettong()");
// onEvent("control/control/savedRecords", "click", "loadEntityAndPopulateBettong()");
onEvent("Project/Main"                        , "show"  , "addSampleNavigation(); populateMain(); loadSites(); ");
onEvent("Project/Main/Record_Site"            , "click" , "newTabGroup(\"Site\"); createAndPopulateSite(); ");
onEvent("Site/Photolog/Record_External_Photo" , "click" , "showTabGroup(\"Photolog\")");
onEvent("Site/Site_Recording/Take_From_GPS"   , "click" , "fillInGPS()");
onEvent("Users/Login"                         , "show"  , "loadUsers()");
onEvent("Users/Login/Author_List"             , "click" , "login()");

onEvent("Project/Records/All_Site_Records"    , "click" , "loadSite();");
