// TODO: Bind duplicate button

/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;

User user;
String userid;
String username;
entityId = null;
photolog_id = null;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
}
makeLocalID();





/******************************************************************************/
/*                                    USER                                    */
/******************************************************************************/

loadUsers() {
    userid = null;
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("Users/Login/Author_List", result);
        }
    });
}

login() {
    userid = getListItemValue();
    fetchOne("SELECT userid,fname,lname,email FROM user where userid='" + userid + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("Project");
        }
    });
}

/******************************************************************************/
/*                                 ACTIONBAR                                  */
/******************************************************************************/

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Sync}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Enabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Enable_Sync}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Disabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        updateGPSStatus();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        updateGPSStatus();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        updateGPSStatus();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
        updateGPSStatus();
    }
});

/******************************************************************************/
/*                             SITE (sort of...)                              */
/******************************************************************************/

createNewSite() {
    siteNumber = getFieldValue("Project/Main/Site_Number");
    siteCode   = getFieldValue("Project/Main/Site_Code");
    if (siteNumber.equals("")) {
        showWarning("{Warning}", "{Err_Site_Number}");
        return;
    }
    if (siteCode.length() != 3) {
        showWarning("{Warning}", "{Err_Site_Code}");
        return;
    }

    entityId = null;
    newTabGroup("Site");
}

isNewSite() {
    return entityId == null;
}

initNewSite() {
    if (!isNewSite())
        return;

    siteCode   = getFieldValue("Project/Main/Site_Code");
    siteNumber = getFieldValue("Project/Main/Site_Number");
    team       = getFieldValue("Project/Main/Team_Members");
    setFieldValue("Site/Site_Recording/Site_Code"   , siteCode);
    setFieldValue("Site/Site_Recording/Site_Number" , siteNumber);
    setFieldValue("Site/Site_Recording/Team"        , team);
    setFieldValue("Site/Site_Recording/Author"      , username);
    setTimestamp( "Site/Site_Recording/Created_At");
   
    //take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    saveSiteStartingId(Integer.toString(Integer.parseInt(siteNumber) + 1));
}

saveSiteStartingId(String siteStartingID) {
    setFieldValue("Project/Main/Site_Number", siteStartingID);
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Site_Number', '" + siteStartingID + "');", null);
}

/* Loads the sample starting ID if one exists, otherwise defaults to '1'. */
loadSiteStartingID() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Site_Number';", new FetchCallback() {
        onFetch(result) {
            Log.v("", "[loadSiteStartingID()] fetched sample ID from localSettings: " + result);
            if (isNull(result)) {
                siteStartingID = "1";
                saveSiteStartingId(siteStartingID);
            } else {
                siteStartingID = result.get(0);
                setFieldValue("Project/Main/Site_Number", siteStartingID);
                Log.v("", "[loadSiteStartingID()] set sample starting ID to: " + siteStartingID);
            }
        }
    });
}

populateMain() {
    setFieldValue("Project/Main/Author", username);
    loadSiteStartingID(); //take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    updateGPSStatus();
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

takePoint() {
    Object pos = getGPSPosition();
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        showToast("{Err_Con}");
        return;
    }
    if (pos == null) {
        showToast("{GPS_Not_Initialised}");
        return;
    }
    Object pos = getGPSPositionProjected();

    Double northing = pos.getLatitude();
    Double easting  = pos.getLongitude();

    point = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);

    ArrayList geolist = new ArrayList();
    geolist.add(point);

    entName = "Site";
    saveArchEnt(entityId, entName, geolist, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            print("[takePoint()] Added geometry: " + geolist);
            fillInGPS();
        }
        onError(message) {
            Log.d("[takePoint()] Error: ", message);
        }
    });
}

/* Sets the value of GPS views for the given tab path. */
fillInGPS() {
    if (isNull(entityId)) {
        return;
    }

    String tabgroup = "Site/Site_Recording/";
    String query = "SELECT x(transform(geospatialcolumn, 4326)) as longtiude, " +
                   "       y(transform(geospatialcolumn, 4326)) as latitude, " +
                   "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                   "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                   "FROM   latestnondeletedarchent, vocabulary " +
                   "WHERE  uuid = " + entityId + " ";

    fetchOne(query, new FetchCallback() {
        onFetch(result) {
            print("[fillInGPS()] Fetched DB transformed geometry: " + result);
            setFieldValue(tabgroup + "Latitude"  , result.get(0));
            setFieldValue(tabgroup + "Longitude" , result.get(1));
            setFieldValue(tabgroup + "Northing"  , result.get(2));
            setFieldValue(tabgroup + "Easting"   , result.get(3));
            setFieldValue(tabgroup + "Accuracy"  , getGPSEstimatedAccuracy());
        }
    });
}

/* Creates sidebar navigation for the sample. */
addNavigationButtons() {
    removeNavigationButtons();

    callbackButtonNew = new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Site}";
        }
        actionOn() {
             print("[Sidebar New Sample] Attempting to make a new sample");

             warnChanges = true;
             cancelTabGroup("Site", warnChanges);
             createNewSite();
        }
    };

    callbackButtonDelete = new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Site}";
        }
        actionOn() {
             deleteSite();
        }
    };

    addNavigationButton("new"    , callbackButtonNew    , "success");
    addNavigationButton("delete" , callbackButtonDelete , "danger");
}

List getSampleDateAttributeList() {
    attributes = createAttributeList();
    print("[getSampleDateAttributeList()] created an attribute list: " + attributes);
    sampleDate = new java.text.SimpleDateFormat("ddMMMyy").format(new Date());
    print("[getSampleDateAttributeList()] grabbed the date: " + sampleDate);
    entityAttribute = createEntityAttribute("Created_At", null, null, sampleDate, null);
    print("[getSampleDateAttributeList()] created the entity attribute: " + entityAttribute);
    attributes.add(entityAttribute);
    print("[getSampleDateAttributeList()] added to the attribute list, the attributes: " + attributes);
    return attributes;
}

/* Generates a confirmation prompt for deleting the current sample. */
deleteSite() {
    tabgroup = "Site";
    print("[deleteSite()] Prompting a sample deletion, entityId = " + entityId);
    if (!isNull(entityId)) {
        print("[deleteSite()] Confirming a sample deletion");
        showAlert("{Confirm_Deletion}", "{Press_To_Delete} {" + tabgroup + "}!", "reallyDeleteSite()", "doNotDelete()");
    } else {
        cancelTabGroup(tabgroup, true);
        print("[deleteSite()] Cancelling a sample deletion.");
    }
}

/* Deletes the current water sample. */
reallyDeleteSite() {
    print("[reallyDeleteSite()] Really deleting the sample.");
    tabgroup = "Site";
    deleteArchEnt(entityId, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup(tabgroup, false);
        }
    });
}

/* Removes sidebar buttons. */
removeNavigationButtons() {
    removeNavigationButton("new");
    removeNavigationButton("duplicate");
    removeNavigationButton("delete");
}

updateGPSStatus() {
    String status = "";
    String previousStatus = getFieldValue("Project/Main/GPS_Diagnostics");
    String notInitialised = "GPS is not initialised";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            String error = "GPS is no longer initailised. Previous status:";
            // check that error message wasn't previously appended to the previous status message.
            if (previousStatus.subSequence(0, error.length()).equals(error)) {
                status = previousStatus;
            } else {
                Log.d("", "[updateGPSStatus] Previous status subSequence: " + previousStatus.subSequence(0, error.length()-1));
                status = error + "\n" + previousStatus;
            }
        } else {
            status = notInitialised;
        }
    } else {
        status += "Internal GPS: ";
        if (isInternalGPSOn())
        {
            status += "on";
        } else {
            status += "off";
        }
        status += "\nExternal GPS: ";
        if (isExternalGPSOn())
        {
            if (isBluetoothConnected()) {
                status += "on and bluetooth connected";
            } else {
                status += "on and bluetooth disconnected";
            }
        } else {
            status += "off";
        }
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\nLatitude: " + position.getLatitude();
            status += "   Longitude: " + position.getLongitude();
            status += "\nNorthing: " + projPosition.getLatitude();
            status += "   Easting: " + projPosition.getLongitude();
            status += "\nAccuracy: " + getGPSEstimatedAccuracy();
        } else {
            status += "\nPosition: no GPS position could be found";
        }
    }
    Log.v("", "[updateGPSStatus()] GPS status: " + status);
    setFieldValue("Project/Main/GPS_Diagnostics", status);
}

autoSaveSite() {
    enable_autosave = true;
    //keepTabGroupChanges("Site");
    saveTabGroup("Site", entityId, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
            entityId = uuid;
            if(newRecord) {
                showToast("{New_Record_Created}");
            }
            Log.d("autoSaveSite", "saving");
        }
    },
    enable_autosave);
}

loadSites() {
    type = "Site";
    populateCursorList(
            "Project/Records/All_Site_Records",
            "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;",
            25);
}

loadSite() {
    entityId = getListItemValue();
    showTabGroup("Site", entityId, new FetchCallback() {
        onFetch(result) {
            siteCode   = getFieldValue("Site/Site_Recording/Site_Code");
            siteNumber = getFieldValue("Site/Site_Recording/Site_Number");
            team       = getFieldValue("Site/Site_Recording/Team");

            setFieldValue("Project/Main/Site_Code"    , siteCode);
            setFieldValue("Project/Main/Site_Number"  , siteNumber);
            setFieldValue("Project/Main/Team_Members" , team);

            saveSiteStartingId(Integer.toString(Integer.parseInt(siteNumber) + 1));
        }
    });
}

/******************************************************************************/
/*                                  PHOTOLOG                                  */
/******************************************************************************/

String showPhotolog = "cancelTabGroup(\"Photolog\", false); showTab(\"Site/Photolog\"); ";
onEvent("Photolog"                              , "show"  , "addPhotologNavigation();");
onEvent("Photolog/Photolog/Photo_Back"          , "click" , "if(validatePhotoId(showPhotolog)) savePhotolog(showPhotolog)");
onEvent("Site/Photolog"                         , "show"  , "loadRelatedPhotologs(entityId)");
onEvent("Site/Photolog/List_Of_External_Photos" , "click" , "loadPhotolog();");
onEvent("Site/Photolog/Record_External_Photo"   , "click" , "newPhotolog()");

validatePhotoId(String callbackShowPhotolog) {
    if (isNull(getFieldValue("Photolog/Photolog/ID"))) {
        showAlert(
            "{Cannot_Save_Photolog}",
            "{Please_Enter_ID}",
            "",
            callbackShowPhotolog
        );
        return false;
    } else {
        return true;
    }
}

/* Populates the photolog list with the existing photologs linked to the given sample ID. */
loadRelatedPhotologs(String related_sample_id) {
    if(!isNull(related_sample_id)) {
        fetchAll("SELECT uuid, response " +
                "FROM latestNonDeletedArchEntFormattedIdentifiers " +
                "WHERE aenttypename = 'External_Photo' " +
                "AND uuid IN  (select uuid " +
                "FROM latestNonDeletedAentReln " +
                    "WHERE relationshipid in (SELECT relationshipid " +
                        "FROM latestNonDeletedAentReln " +
                        "JOIN relationship USING (relationshipid) " +
                        "JOIN relntype USING (relntypeid) " +
                        "WHERE uuid = "+related_sample_id + " " +
                        "AND relntypeName = 'Site-External_Photo') " +
                        "AND uuid != "+related_sample_id+");",  new FetchCallback() {
                onFetch(result) {
                    if(isNull(result)) {
                        result = new ArrayList();
                        result.add(new NameValuePair("{No_Records_Found}", ""));
                    }
                    populateList("Site/Photolog/List_Of_External_Photos", result);
                }
                onError(message) {
                    showToast(message);
                }
            });
    } else {
        result = new ArrayList();
        result.add(new NameValuePair("{No_Records_Found}", ""));
        populateList("Site/Photolog/List_Of_External_Photos", result);
    }
}

/* Make a new log, somewhere in the forest, which has a knack for taking pictures */
newPhotolog() {
    newTabGroup("Photolog");
    photolog_id = null;
    setTimestamp("Photolog/Photolog/Timestamp");
}

savePhotolog(String callbackEval) {
    if(isNull(getFieldValue("Photolog/Photolog/ID"))) return;

    callback = new SaveCallback() {
        onSave(uuid, newRecord) {
            Log.v("savePhotolog", "onSave event");
            photolog_id = uuid;
            saveEntitiesToRel("Site-External_Photo", entityId, photolog_id, callbackEval);
        }
    };
    saveTabGroup("Photolog", photolog_id, null, null, callback);
}

/* Loads a photolog based on the most recent list item selected. */
loadPhotolog() {
    photolog_id = getListItemValue();
    print("[loadPhotolog()] photolog list item value null status: " + isNull(photolog_id));
    print("[loadPhotolog()] Using photolog list item value as photolog_id: " + photolog_id);
    if (!isNull(photolog_id)) {
        loadPhotologFrom(photolog_id);
    }
}

/* Loads a photolog based on the given ID. */
loadPhotologFrom(archentid) {
    if (isNull(archentid)) {
        showToast("{No_Photolog_Selected}");
        return;
    }

    enable_autosave = false;
    showTabGroup("Photolog", archentid, new FetchCallback() {
        onFetch(result) {
            photolog_id = archentid;
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                }
            }, enable_autosave);
        }
    });
}

/* Generates a confirmation to delete the current photolog */
deletePhotolog() {
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_To_Delete} {Photolog}!", "reallyDeletePhotolog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photolog", true);
    }
}

/* Deletes the current photolog. */
reallyDeletePhotolog() {
    deleteArchEnt(photolog_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Photolog", false);
            showTab("Site/Photolog");
        }
    });
}

/* Creates sidebar navigation buttons for the photolog. */
addPhotologNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Photolog}";
        }
        actionOn() {
            if(!isNull(photolog_id)) {
                newPhotolog();
            } else {
                showAlert("{Warning}", "{Lose_Unsaved_Changes}!", "newPhotolog()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Photolog}";
        }
        actionOn() {
            deletePhotolog();
        }
    }, "danger");
}

/******************************************************************************/
/*                                MEASUREMENTS                                */
/******************************************************************************/

measurement_count = 0;

onEvent("Site/Measurements", "show", "renderMeasurementPage();");

/* Renders the measurement tab using dynamic UI. */
renderMeasurementPage() {
    executeViewTask(new ViewTask() {
        doTask() {
            o = "orientation";
            e = "even";
            removeAllViewsAndContainers("Site");
            createContainer("Site/Measurements/container3"   , o);
            createContainer("Site/Measurements/measurement_container" , e   , "Site/Measurements/container3");

            measurement_count = 0;
            ArrayList measurement_list = new ArrayList();

            fetchAll(
                "select uuid, response " +
                "from latestnondeletedarchentformattedidentifiers " +
                "where uuid in (select b.uuid " +
                "from latestnondeletedaentreln a " +
                "join (latestnondeletedaentreln b " +
                "join relationship using (relationshipid) " +
                "join relntype using (relntypeid)) on (a.uuid != b.uuid and a.relationshipid = b.relationshipid) " +
                "where relntypename='Site-Measurement' " +
                "and a.uuid = " + entityId + "); ",
                 new FetchCallback() {
                     onFetch(measurement_list) {
                         for(m : measurement_list) {
                             String measurement_id    = m.get(0);
                             String measurement_value = m.get(1);
                             makeMeasurementRow(
                                 measurement_id,
                                 measurement_value,
                                 measurement_count + "" // Implicit type conversion
                             );
                             measurement_count++;
                         }

                         onEvent(
                             "Site/Measurements/Add_A_Measurement",
                             "delayclick",
                             "addNewMeasurement();"
                         );
                     }
                     onError(message) {
                         showToast(message);
                     }
                 }
            );
        }
    });
}

/* Adds a new measurement value, saves the entity and updates the dynamic UI. */
addNewMeasurement() {
    measurementField    = getFieldValue("Site/Measurements/Measurement_Field");
    measurementTypeId   = getFieldValue("Site/Measurements/Measurement_Type");
    measurementTypeName = "";     // Gotta set this with the fetchOne call below
    if(isNull(measurementField)) {
        showToast("{Please_Fill_In_Measurement}");
        return;
    }

    fetchOne("select vocabname from vocabulary where vocabid = " + measurementTypeId, new FetchCallback() {
        onFetch(result) {
            measurementTypeName = result.get(0);
        }
        onError(message) {
            showToast(message);
        }
    });


    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Measurement_Type"  , null , measurementTypeId , null             , null));
    attributes.add(createEntityAttribute("Measurement_Field" , null , null              , measurementField , null));

    saveArchEnt(null, "Measurement", null, attributes, new SaveCallback() {
        onSave(measurement_id, newRecord) {
            saveEntitiesToRel("Site-Measurement", entityId, measurement_id);

            String measurement_value = measurementTypeName + ": " + measurementField;
            makeMeasurementRow(
                measurement_id,
                measurement_value,
                measurement_count + "" // Implicit type conversion
            );
            measurement_count++;

            onEvent("Site/Measurements/Add_A_Measurement", "delayclick", "addNewMeasurement();");
        }
    });
}

makeMeasurementRow(String measurement_id, String measurement_value, String measurement_count) {
    o = "orientation";
    //e = "even";
    h = "heavy";
    l = "light";

    tab    = "Site/Measurements/";
    field  = createViewDef().createTextField("decimal").setReadOnly(true);
    button = createViewDef().createButton().setLabel("X").setStyleCss("faims-danger");

    createContainer(tab + "measurement_row_"              + measurement_count , o      , tab + "measurement_container");
    createContainer(tab + "measurement_value_container_"  + measurement_count , l      , tab + "measurement_row_"              + measurement_count);
    createContainer(tab + "delete_measurement_container_" + measurement_count , h      , tab + "measurement_row_"              + measurement_count);
    createView(     tab + "measurement_value_"            + measurement_count , field  , tab + "measurement_value_container_"  + measurement_count);
    createView(     tab + "delete_measurement_"           + measurement_count , button , tab + "delete_measurement_container_" + measurement_count);

    setFieldValue("Site/Measurements/measurement_value_" + measurement_count, measurement_value);
    onEvent("Site/Measurements/delete_measurement_" + measurement_count, "click", "deleteMeasurement(\"" + measurement_id + "\", \"" + measurement_count + "\");");

    refreshTabgroupCSS("Site");
}

/* Generates a confirmation prompt to delete the given measurement. */
deleteMeasurement(String measurement_id, String measurement_index) {
    showAlert(
        "{Confirm_Deletion}",
        "{Press_To_Delete} {Measurement}!",
        "reallyDeleteMeasurement(\"" + measurement_id + "\", \"" + measurement_index + "\")",
        "doNotDelete()"
    );
}

/* Deletes the given measurement. */
reallyDeleteMeasurement(String measurement_id, String measurement_index) {
    deleteArchEnt(measurement_id, new DeleteCallback() {
        onDelete(uuid) {
            removeContainer("Site/Measurements/measurement_row_" + measurement_index);
            removeContainer("Site/Measurements/measurement_value_container_" + measurement_index);
            removeContainer("Site/Measurements/delete_measurement_container_" + measurement_index);
            removeView("Site/Measurements/measurement_value_" + measurement_index);
            removeView("Site/Measurements/delete_measurement_" + measurement_index);
            showToast("{Measurement_Deleted}");
        }
    });
}

doNotDelete() {
    showToast("{Delete_Cancelled}");
}

/******************************************************************************/
/*                                   PHOTOS                                   */
/******************************************************************************/
onEvent(
    "Site/Site_Recording/Take_Photo",
    "click",
    "attachPictureTo(\"Site/Site_Recording/Photos\")"
);

/******************************************************************************/
/*                                  SKETCHES                                  */
/******************************************************************************/
onEvent(
    "Site/Site_Recording/Attach_Sketch",
    "click",
    "attachFileTo(\"Site/Site_Recording/Sketches\");"
);
onEvent(
    "Site/Site_Recording/View_Sketch",
    "click",
    "viewArchEntAttachedFiles(entityId);"
);

/******************************************************************************/
/*                                    MAP                                     */
/******************************************************************************/
onEvent("Project/Map"                   , "show"  , "renderDynamicMapViews();");
onEvent("Project/Map/Centre_Map"        , "click" , "centreMap();");
onEvent("Project/Map/Save_Map_Settings" , "click" , "saveMapSettings();");

/* Saves the sample archent with geometry equal to the single point drawn on the map. */
getPointFromMap() {
    showToast("{Not_Implemented}");
}

Boolean mapButtonRendered = false;

dataEntryLayerID = null;

/* Initialises the map. */
initMap() {
    // Base map layer
    mapPath = "Project/Map/map";
    setMapZoom(mapPath, 13.0f);
    showBaseMap(mapPath, "base map", "files/data/maps/Simabi-Kaironk_11km_N-S_18km_E-W geotiff.tif");

    ps  = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls  = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts  = createTextStyle(10, Color.BLACK, 40, Typeface.SANS_SERIF);

    // Database layers
    dbLayerName = "Sites";
    isEntity = true;
    queryName = "Site";
    querySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Site'";
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    showDatabaseLayer(mapPath, dbLayerName, isEntity, queryName, querySql, ps, ls, pos, ts);

    // Canvas layers
    dataEntryLayerID = createCanvasLayer(mapPath, "Data Entry Layer");
    setSelectedLayer(mapPath, "Data Entry Layer");
    loadMapSettings();
    print("[initMap()] Finished Initialising the Map.");
}

/* Centres the map on the current position. */
centreMap() {
    if(!isExternalGPSOn() && !isInternalGPSOn()) {
        showToast("{GPS_Not_Initialised}");
    } else {
        centerOnCurrentPosition("Project/Map/map");
    }
}

/* Loads a map configuration file if one exists. */
loadMapSettings() {
   jsonFile = getAttachedFilePath("files/data/saved_config.json");
    if(new File(jsonFile).exists()) {
        loadMapViewConfiguration("Project/Map/map", jsonFile, "showToast(\"{Loaded_Map_Configuration}\")");
    }
}

/* Saves the current map configuration. */
saveMapSettings() {
    file = getAttachedFilePath("files/data/saved_config.json");
    saveMapViewConfiguration("Project/Map/map", file, "showToast(\"{Saved_Map_Configuration}\")");
}

Boolean arrivedFromSample = false;

/* Renders all the dynamic views for the map tab. */
renderDynamicMapViews() {
    print("[renderDynamicMapViews()] arrived at map from sample: " + arrivedFromSample);
    removeAllViewsAndContainers("Project");
    executeViewTask(new ViewTask() {
        doTask() {
            if (arrivedFromSample) {
                print("[renderDynamicMapViews()] arrived at map from sample.");
                arrivedFromSample = false;
                buttonDef = createViewDef().createButton().setLabel("Return to data recording and save point");
                createView("Project/Map/returnToSite", buttonDef);
                onEvent("Project/Map/returnToSite", "click", "returnToSite();");
            } else {
                print("[renderDynamicMapViews()] arrived at map from somewhere other than a sample.");
            }
        }
    });
}

/* Returns to the sample from the map after recording a point. */
returnToSite() {
    String tabgroup = "Project";

    // Get the geometry from the data layer and proceed only if the geometry is a single point.
    List geolist = getGeometryList("Project/Map/map", dataEntryLayerID);
    print("[returnToSite()] Gemoetry List: " + geolist);
    if (geolist.size() != 1) {
        showAlert("{Alert}", "{Only_One_Point_Allowed}", "", "showTabGroup(\""+tabgroup+"\");");
        return;
    }
    boolean isPoint = false;
    if (geolist.get(0) instanceof Point) {
        isPoint = true;
    }
    if (!isPoint) {
        return;
    }

    // Save the archent with the point as the entity geometry
    entName = "Point";
    saveArchEnt(entityId, entName, geolist, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            print("[returnToSite()] Saved geometry: " + geolist);
            fillInGPS();
        }
    });

    // Clear the data entry layer and return to the sample tab

    // clearGeometryList("Project/Map/map", geolist);
    showTabGroup(tabgroup);
}

initMap();

/******************************************************************************/
/*                                    UTIL                                    */
/******************************************************************************/

saveEntitiesToRel(String type, String entity1, String entity2) {
    String callback = "";
    saveEntitiesToRel(type, entity1, entity2, callback);
}
saveEntitiesToRel(String type, String entity1, String entity2, String callbackEval) {
    if (isNull(entity1) || isNull(entity2)) return;

    stage3 = new SaveCallback() {
        onSaveAssociation(entityId, relId) {
            eval(callbackEval);
            Log.v("saveEntitiesToRel", "onSave stage3");
        }
    };
    stage2 = new SaveCallback() {
        onSaveAssociation(entityId, relId) {
            addReln(entity2, relId, null, stage3);
            Log.v("saveEntitiesToRel", "onSave stage2");
        }
    };
    stage1 = new SaveCallback() {
        onSave(relId, entityId) {
            addReln(entity1, relId, null, stage2);
            Log.v("saveEntitiesToRel", "onSave stage1");
        }
    };
    saveRel(null, type, null, null, stage1);
}

makeVocab(String type, String path, String attrib){
    query = "SELECT   vocabid, vocabname " +
            "FROM     vocabulary " +
            "JOIN     attributekey USING (attributeid)" +
            "WHERE    attributename = '" + attrib + "' " +
            "ORDER BY vocabcountorder";
    fetchAll(
        query,
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        }
    );
}

/******************************************************************************/
/*                      EVENT BINDINGS & INITIALISATIONS                      */
/******************************************************************************/

startInternalGPS();
// setSyncEnabled(true);
// setFileSyncEnabled(true);

// These should go in functions so we can see what's populating what.
makeVocab("CheckBoxGroup" , "Site/Site_Recording/Cultural_Material_Present" , "Cultural_Material_Present");
makeVocab("DropDown"      , "Site/Site_Recording/Current_Land_Use"          , "Current_Land_Use");
makeVocab("DropDown"      , "Site/Site_Recording/Disturbance"               , "Disturbance");
makeVocab("DropDown"      , "Site/Site_Recording/Elevation_Range"           , "Elevation_Range");
makeVocab("DropDown"      , "Site/Site_Recording/Ground_Visibility"         , "Ground_Visibility");
makeVocab("DropDown"      , "Site/Site_Recording/Landscape"                 , "Landscape");
makeVocab("DropDown"      , "Site/Site_Recording/Sampling_Method"           , "Sampling_Method");
makeVocab("DropDown"      , "Site/Site_Recording/Site_Type"                 , "Site_Type");
makeVocab("DropDown"      , "Site/Site_Recording/Surface_Geomorphology"     , "Surface_Geomorphology");
makeVocab("DropDown"      , "Site/Site_Recording/Vegetation"                , "Vegetation");
makeVocab("RadioGroup"    , "Site/Site_Recording/Site_Significance"         , "Site_Significance");
populateHierarchicalDropDown("Site/Measurements/Measurement_Type"           , "Measurement_Type");

onEvent("Project"                             , "show"  , "removeNavigationButtons();");
onEvent("Project/Main"                        , "show"  , "populateMain(); loadSites(); ");
onEvent("Project/Main/Record_Site"            , "click" , "createNewSite(); ");
onEvent("Project/Records/All_Site_Records"    , "click" , "loadSite();");
onEvent("Site"                                , "show"  , "autoSaveSite(); initNewSite(); addNavigationButtons(); ");
onEvent("Site/Site_Recording/Take_From_GPS"   , "click" , "takePoint()");
onEvent("Users/Login"                         , "show"  , "loadUsers()");
onEvent("Users/Login/Author_List"             , "click" , "login()");
