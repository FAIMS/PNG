// TODO: Bind duplicate button

/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;

User user;
String userid;
String username;
entity_id = null;
photolog_id = null;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
}
makeLocalID();





/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    userid = null;
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("Users/Login/Author_List", result);
        }
    });
}

login() {
    userid = getListItemValue();
    fetchOne("SELECT userid,fname,lname,email FROM user where userid='" + userid + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("Project");
        }
    });
}

populateControlTabGroup() {
    if (userid == null) userid = getListItemValue(); // userid will only be null on first login (and subsequent accesses of the login tabgroup)

    //don't write your own query here. Use the search queries from csiro.

}

/** Action Bar **/

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Sync_Enabled}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Sync_Disabled}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});



createNewSite() {
    siteCode = getFieldValue("Project/Main/Site_Code");
    if (isNull(siteCode)) {
        showWarning("{Warning}", "{Err_Site_Code}");
        return;
    }

    entity_id = null;
    newTabGroup("Site");
}

isNewSite() {
    return entity_id == null;
}
initNewSite() {
    if (!isNewSite())
        return;

    siteCode   = getFieldValue("Project/Main/Site_Code");
    siteNumber = getFieldValue("Project/Main/Site_Number");
    team       = getFieldValue("Project/Main/Team_Members");
    setFieldValue("Site/Site_Recording/Site_Code"   , siteCode);
    setFieldValue("Site/Site_Recording/Site_Number" , siteNumber);
    setFieldValue("Site/Site_Recording/Team"        , team);
    setFieldValue("Site/Site_Recording/Author"      , username);
    setTimestamp( "Site/Site_Recording/Created_At");
   
    //take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    setSiteStartingID(Integer.toString(Integer.parseInt(siteNumber) + 1));
}

//createAndPopulateSite() {
    //entity_id = null;
    //newTabGroup("Site");

    //siteCode   = getFieldValue("Project/Main/Site_Code");
    //siteNumber = getFieldValue("Project/Main/Site_Number");
    //team       = getFieldValue("Project/Main/Team_Members");
    //setFieldValue("Site/Site_Recording/Author"      , username);
    //setFieldValue("Site/Site_Recording/Site_Code"   , siteCode);
    //setFieldValue("Site/Site_Recording/Site_Number" , siteNumber);
    //setFieldValue("Site/Site_Recording/Team"        , team);
    //setTimestamp( "Site/Site_Recording/Created_At");
   
    ////take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    //setSiteStartingID(Integer.toString(Integer.parseInt(siteNumber) + 1));
//}

//setSitePrefix(String samplePrefix) {
    //setFieldValue("Project/Start/Sample_Prefix", samplePrefix);
    //fetchOne("REPLACE INTO localSettings(key, value) VALUES('Sample Prefix', '" + samplePrefix + "');", null);
//}

setSiteStartingID(String siteStartingID) {
    setFieldValue("Project/Main/Site_Number", siteStartingID);
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Site_Number', '" + siteStartingID + "');", null);
}

/* Loads the sample starting ID if one exists, otherwise defaults to '1'. */
loadSiteStartingID() {
    //fetchOne("SELECT value FROM localSettings WHERE key = 'Sample Starting ID';", new FetchCallback() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Site_Number';", new FetchCallback() {
        onFetch(result) {
            Log.v("", "[loadSiteStartingID()] fetched sample ID from localSettings: " + result);
            if (isNull(result)) {
                siteStartingID = "1";
                setSiteStartingID(siteStartingID);
            } else {
                siteStartingID = result.get(0);
                setFieldValue("Project/Main/Site_Number", siteStartingID);
                Log.v("", "[loadSiteStartingID()] set sample starting ID to: " + siteStartingID);
            }
        }
    });
}

populateMain() {
    //newTabGroup("bettong");
    setFieldValue("Project/Main/Author", username);
    loadSiteStartingID(); //take autonumbering from csiro, make sure to support localsettings preservation of ID. 
    updateGPSStatus();
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

takePoint() {
    Object position = getGPSPosition();
    if (position == null) {
        showToast("{GPS_Not_Initialised}");
        return;
    }
    Object projPosition = getGPSPositionProjected();
    Double latitude = position.getLatitude();
    Double longitude = position.getLongitude();
    Double northing = projPosition.getLatitude();
    Double easting = projPosition.getLongitude();

    samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
    ArrayList geolist = new ArrayList();
    geolist.add(samplePoint);
    entName = "Site";
    saveArchEnt(entity_id, entName, geolist, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            print("[takePoint()] Added geometry: " + geolist);
            fillInGPS();
        }  
    });    
}

/* Sets the value of GPS views for the given tab path. */
fillInGPS() {
    if (isNull(entity_id)) {
        return;
    }
    String tabgroup = "Site/Site_Recording/";
    //String query = "select x(transform(geospatialcolumn, 4326)) as longtiude, y(transform(geospatialcolumn, 4326)) as latitude, x(transform(geospatialcolumn, CAST (vocabname AS INTEGER))) as easting, y(transform(geospatialcolumn, CAST (vocabname AS INTEGER))) as northing " +
        //"from latestnondeletedarchent, vocabulary " +
        //"where uuid = " + entity_id + " " +
        //"and vocabid = " + getFieldValue(tabgroup + "/Basic_Info/SRID") + ";";

    String query = "select x(transform(geospatialcolumn, 4326)) as longtiude, y(transform(geospatialcolumn, 4326)) as latitude, x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                "from latestnondeletedarchent, vocabulary " +
                        "where uuid = " + entity_id + " ";

    fetchOne(query, new FetchCallback() {
        onFetch(result) {
            print("[fillInGPS()] Fetched DB transformed geometry: " + result);
            setFieldValue(tabgroup + "Latitude", result.get(0));
            setFieldValue(tabgroup + "Longitude", result.get(1));
            setFieldValue(tabgroup + "Northing", result.get(2));
            setFieldValue(tabgroup + "Easting", result.get(3));
        }
    });
}

//takePoint() {
    //location = getGPSPosition();
    //locationProj = getGPSPositionProjected();
    //if (!isExternalGPSOn() && !isInternalGPSOn()) {
        //showWarning("{Err_Loc}", "{Err_Con}");
        //return;
    //}
    //if (location == null){
        //showWarning("{Err_Loc}", "{Err_Sig}");
        //return;
    //}

    //tab = "Site/Site_Recording/";
    //acc = getGPSEstimatedAccuracy();
    //hea = getGPSHeading();
    //lat = location.getLatitude();
    //lon = location.getLongitude();
    //nor = locationProj.getLatitude();
    //eas = locationProj.getLongitude();

    //fillInGPS();
//}

//fillInGPS() {
    //location = getGPSPosition();
    //locationProj = getGPSPositionProjected();
    //if (!isExternalGPSOn() && !isInternalGPSOn()) {
        //showWarning("{Err_Loc}", "{Err_Con}");
        //return;
    //}
    //if (location == null){
        //showWarning("{Err_Loc}", "{Err_Sig}");
        //return;
    //}

    //tab = "Site/Site_Recording/";
    //acc = getGPSEstimatedAccuracy();
    //hea = getGPSHeading();
    //lat = location.getLatitude();
    //lon = location.getLongitude();
    //nor = locationProj.getLatitude();
    //eas = locationProj.getLongitude();
    //setFieldValue(tab + "Latitude"  , lat);
    //setFieldValue(tab + "Longitude" , lon);
    //setFieldValue(tab + "Northing"  , nor);
    //setFieldValue(tab + "Easting"   , eas);
    //setFieldValue(tab + "Accuracy"  , nor);
    //setFieldValue(tab + "Heading"   , hea);
//}

/* Creates sidebar navigation for the sample. */
addNavigationButtons() {
    removeNavigationButtons();

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Site}";
        }
        actionOn() {
             print("[Sidebar New Sample] Attempting to make a new sample");

             warnChanges = true;
             cancelTabGroup("Site", warnChanges);
             createNewSite();
        }
    }, "success");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "{Duplicate_Site}";
        }
        actionOn() {
             if(isNull(entity_id)) {
                 showWarning("{Warning}", "{Site_Not_Duplicated}");
             } else {
                //// This geometry will be added to the new entity
                //geometry = null;

                //siteNumber = getFieldValue("Project/Main/Site_Number");
                //siteNumberAttribute = createEntityAttribute(
                    //"Site_Number",
                    //null,
                    //null,
                    //siteNumber + "", // Concatenation performs type conversion
                    //null);

                //// These attributes will be added to the new entity
                //extraAttributes = new ArrayList();
                //extraAttributes.add(siteNumberAttribute);

                //// These attributes will be excluded from the new entity
                //excludeAttributes = new ArrayList();
                //excludeAttributes.add("name");
                //excludeAttributes.add("Latitude");
                //excludeAttributes.add("Longitude");
                //excludeAttributes.add("Northing");
                //excludeAttributes.add("Easting");
                //excludeAttributes.add("Accuracy");
                //excludeAttributes.add("Heading");

                //saveCallback = new SaveCallback() {
                    //onSave(newRecord) {
                        //setSiteStartingID(Integer.toString(Integer.parseInt(siteNumber) + 1));
                    //}
                    //onError(message) {
                        //showToast(message);
                    //}
                //};
                //duplicateTabGroup("Site", geometry, extraAttributes, excludeAttributes, saveCallback);
                //
                // TODO: Warn user that geometry data is not duplicated
             }
        }
    }, "primary");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Site}";
        }
        actionOn() {
             deleteSite();
        }
    }, "danger");    

}

/* Generates a confirmation prompt for deleting the current sample. */
deleteSite() {
    tabgroup = "Site";
    print("[deleteSite()] Prompting a sample deletion, entity_id = " + entity_id);
    if (!isNull(entity_id)) {
        print("[deleteSite()] Confirming a sample deletion");
        showAlert("{Confirm_Deletion}", "{Press_To_Delete} {" + tabgroup + "}!", "reallyDeleteSite()", "doNotDelete()");
    } else {
        cancelTabGroup(tabgroup, true);
        print("[deleteSite()] Cancelling a sample deletion.");
    }
}

/* Deletes the current water sample. */
reallyDeleteSite() {
    print("[reallyDeleteSite()] Really deleting the sample.");
    tabgroup = "Site";
    deleteArchEnt(entity_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup(tabgroup, false);
        }
    });
}

/* Removes sidebar buttons. */
removeNavigationButtons() {
    removeNavigationButton("new");
    removeNavigationButton("duplicate");
    removeNavigationButton("delete");
}

updateGPSStatus() {
    String status = "";
    String previousStatus = getFieldValue("Project/Main/GPS_Diagnostics");
    String notInitialised = "GPS is not initialised";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            String error = "GPS is no longer initailised. Previous status:";
            // check that error message wasn't previously appended to the previous status message.
            if (previousStatus.subSequence(0, error.length()).equals(error)) {
                status = previousStatus;
            } else {
                Log.d("", "[updateGPSStatus] Previous status subSequence: " + previousStatus.subSequence(0, error.length()-1));
                status = error + "\n" + previousStatus;
            }
        } else {
            status = notInitialised;
        }
    } else {
        status += "Internal GPS: ";
        if (isInternalGPSOn())
        {
            status += "on";
        } else {
            status += "off";
        }
        status += "\nExternal GPS: ";
        if (isExternalGPSOn())
        {
            if (isBluetoothConnected()) {
                status += "on and bluetooth connected";
            } else {
                status += "on and bluetooth disconnected";
            }
        } else {
            status += "off";
        }
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\nLatitude: " + position.getLatitude();
            status += "   Longitude: " + position.getLongitude();
            status += "\nNorthing: " + projPosition.getLatitude();
            status += "   Easting: " + projPosition.getLongitude();
            status += "\nAccuracy: " + getGPSEstimatedAccuracy();
            status += "\n Heading: " + getGPSHeading();
        } else {
            status += "\nPosition: no GPS position could be found";
        }
    }
    Log.v("", "[updateGPSStatus()] GPS status: " + status);
    setFieldValue("Project/Main/GPS_Diagnostics", status);
}

autoSaveSite() {
    enable_autosave = true;
    //keepTabGroupChanges("Site");
    saveTabGroup("Site", entity_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
            entity_id = uuid;
            if(newRecord) {
                showToast("{New_Record_Created}");
            }
            Log.d("autoSaveSite", "saving");
        }
    },
    enable_autosave);
}

populateSiteCode() {
    userid = null;
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

makeVocab(String type, String path, String attrib){
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

loadSites() {
    type = "Site";
    populateCursorList(
            "Project/Records/All_Site_Records",
            "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;",
            25);
}

loadSite() {
    entity_id = getListItemValue();
    showTabGroup("Site", entity_id, new FetchCallback() {
        onFetch(result) {
            siteCode   = getFieldValue("Site/Site_Recording/Site_Code");
            siteNumber = getFieldValue("Site/Site_Recording/Site_Number");
            team       = getFieldValue("Site/Site_Recording/Team");

            setFieldValue("Project/Main/Site_Code"    , siteCode);
            setFieldValue("Project/Main/Site_Number"  , siteNumber);
            setFieldValue("Project/Main/Team_Members" , team);

            setSiteStartingID(Integer.toString(Integer.parseInt(siteNumber) + 1));
        }
    });
}

/******************************************************************************/
/*                                  PHOTOLOG                                  */
/******************************************************************************/

onEvent("Photolog", "show", "addPhotologNavigation();");
onFocus("Photolog/Photolog/ID", null, "activateAutoSavePhotolog();");
onEvent("Photolog/Photolog/Photo_Back", "click", "cancelTabGroup(\"Photolog\", false); showTab(\"Site/Photolog\");");
onEvent("Site/Photolog/List_Of_External_Photos", "click", "loadPhotolog();");

/* Populates the photolog list with the existing photologs linked to the given sample ID. */
loadRelatedPhotologs(String related_sample_id) {
    if(!isNull(related_sample_id)) {
        fetchAll("SELECT uuid, response " +
                "FROM latestNonDeletedArchEntFormattedIdentifiers " +
                "WHERE aenttypename = 'External_Photo' " +
                "AND uuid IN  (select uuid " +
                "FROM latestNonDeletedAentReln " +
                    "WHERE relationshipid in (SELECT relationshipid " +
                        "FROM latestNonDeletedAentReln " +
                        "JOIN relationship USING (relationshipid) " +
                        "JOIN relntype USING (relntypeid) " +
                        "WHERE uuid = "+related_sample_id + " " +
                        "AND relntypeName = 'Site-External_Photo') " +
                        "AND uuid != "+related_sample_id+");",  new FetchCallback() {
                onFetch(result) {
                    if(isNull(result)) {
                        result = new ArrayList();
                        result.add(new NameValuePair("{No_Records_Found}", ""));
                    }
                    populateList("Site/Photolog/List_Of_External_Photos", result);
                }
                onError(message) {
                    showToast(message);
                }
            });     
    } else {
        result = new ArrayList();
        result.add(new NameValuePair("{No_Records_Found}", ""));
        populateList("Site/Photolog/List_Of_External_Photos", result);
    }    
}

/* Make a new log, somewhere in the forest, which has a knack for taking pictures */
newPhotolog() {
    newTabGroup("Photolog");
    photolog_id = null;
    setTimestamp("Photolog/Photolog/Timestamp");
}

savePhotolog() {
    if(!isNull(photolog_id) || isNull(getFieldValue("Photolog/Photolog/ID"))) return;

    enable_autosave = true;
    saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            photolog_id = uuid;
            saveEntitiesToRel("Site-External_Photo", entity_id, photolog_id);
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                }
            }, enable_autosave);
        }
    });
}

/* Loads a photolog based on the most recent list item selected. */
loadPhotolog() {
    photolog_id = getListItemValue();
    print("[loadPhotolog()] photolog list item value null status: " + isNull(photolog_id));
    print("[loadPhotolog()] Using photolog list item value as photolog_id: " + photolog_id);
    if (!isNull(photolog_id)) {
        loadPhotologFrom(photolog_id);
    }
}

/* Loads a photolog based on the given ID. */
loadPhotologFrom(archentid) {
    if (isNull(archentid)) {
        showToast("{No_Photolog_Selected}");
        return;
    }

    enable_autosave = true;
    showTabGroup("Photolog", archentid, new FetchCallback() {
        onFetch(result) {
            photolog_id = archentid;
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                }
            }, enable_autosave);
        }
    });
}

/* Generates a confirmation to delete the current photolog */
deletePhotolog() {
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_To_Delete} {Photolog}!", "reallyDeletePhotolog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photolog", true);
    }
}

/* Deletes the current photolog. */
reallyDeletePhotolog() {
    deleteArchEnt(photolog_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Photolog", false);
            showTab("Site/Photolog");
        }
    });
}

/* Creates sidebar navigation buttons for the photolog. */
addPhotologNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Photolog}";
        }
        actionOn() {
            if(!isNull(photolog_id)) {
                newPhotolog();
            } else {
                showAlert("{Warning}", "{Lose_Unsaved_Changes}!", "newPhotolog()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Photolog}";
        }
        actionOn() {
            deletePhotolog();
        }
    }, "danger");
}

/******************************************************************************/
/*                                MEASUREMENTS                                */
/******************************************************************************/

measurement_count = 0;

onEvent("Site/Measurements", "show", "renderMeasurementPage();");

/* Renders the measurement tab using dynamic UI. */
renderMeasurementPage() {
    executeViewTask(new ViewTask() {
        doTask() {
            o = "orientation";
            e = "even";
            removeAllViewsAndContainers("Site");
            createContainer("Site/Measurements/container3"   , o);
            createContainer("Site/Measurements/measurement_container" , e   , "Site/Measurements/container3");

            measurement_count = 0;
            ArrayList measurement_list = new ArrayList();

            fetchAll("select uuid, response " +
                     "from latestnondeletedarchentformattedidentifiers " +
                     "where uuid in (select b.uuid " +
                     "from latestnondeletedaentreln a " +
                     "join (latestnondeletedaentreln b " +
                     "join relationship using (relationshipid) " +
                     "join relntype using (relntypeid)) on (a.uuid != b.uuid and a.relationshipid = b.relationshipid) " +
                     "where relntypename='Site-Measurement' " +
                     "and a.uuid = " + entity_id + "); ", new FetchCallback() {
                        onFetch(measurement_list) {
                            //print(measurement_list);

                            for(m : measurement_list) {
                                String measurement_id    = m.get(0);
                                String measurement_value = m.get(1);
                                makeMeasurementRow(
                                    measurement_id,
                                    measurement_value,
                                    measurement_count + "" // Implicit type conversion
                                );
                                measurement_count++;
                            }

                            onEvent("Site/Measurements/Add_A_Measurement", "delayclick", "addNewMeasurement();");
                        }
                        onError(message) {
                            showToast(message);
                        }

                    });
        }
    });
}

/* Adds a new measurement value, saves the entity and updates the dynamic UI. */
addNewMeasurement() {
    measurementField    = getFieldValue("Site/Measurements/Measurement_Field");
    measurementTypeId   = getFieldValue("Site/Measurements/Measurement_Type");
    measurementTypeName = "";     // Gotta set this with the fetchOne call below
    if(isNull(measurementField)) {
        showToast("{Please_Fill_In_Measurement}");
        return;
    }

    fetchOne("select vocabname from vocabulary where vocabid = " + measurementTypeId, new FetchCallback() {
        onFetch(result) {
            measurementTypeName = result.get(0);
        }
        onError(message) {
            showToast(message);
        }
    });


    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Measurement_Type"  , null , measurementTypeId , null             , null));
    attributes.add(createEntityAttribute("Measurement_Field" , null , null              , measurementField , null));

    saveArchEnt(null, "Measurement", null, attributes, new SaveCallback() {
        onSave(measurement_id, newRecord) {
            saveEntitiesToRel("Site-Measurement", entity_id, measurement_id);

            String measurement_value = measurementTypeName + ": " + measurementField;
            makeMeasurementRow(
                measurement_id,
                measurement_value,
                measurement_count + "" // Implicit type conversion
            );
            measurement_count++;

            onEvent("Site/Measurements/Add_A_Measurement", "delayclick", "addNewMeasurement();");
        }
    });
}

makeMeasurementRow(String measurement_id, String measurement_value, String measurement_count) {
    o = "orientation";
    //e = "even";
    h = "heavy";
    l = "light";

    tab    = "Site/Measurements/";
    field  = createViewDef().createTextField("decimal").setReadOnly(true);
    button = createViewDef().createButton().setLabel("X").setStyleCss("faims-danger");

    createContainer(tab + "measurement_row_"              + measurement_count , o      , tab + "measurement_container");
    createContainer(tab + "measurement_value_container_"  + measurement_count , l      , tab + "measurement_row_"              + measurement_count);
    createContainer(tab + "delete_measurement_container_" + measurement_count , h      , tab + "measurement_row_"              + measurement_count);
    createView(     tab + "measurement_value_"            + measurement_count , field  , tab + "measurement_value_container_"  + measurement_count);
    createView(     tab + "delete_measurement_"           + measurement_count , button , tab + "delete_measurement_container_" + measurement_count);

    setFieldValue("Site/Measurements/measurement_value_" + measurement_count, measurement_value);
    onEvent("Site/Measurements/delete_measurement_" + measurement_count, "click", "deleteMeasurement(\"" + measurement_id + "\", \"" + measurement_count + "\");");

    refreshTabgroupCSS("Site");
}

/* Generates a confirmation prompt to delete the given measurement. */
deleteMeasurement(String measurement_id, String measurement_index) {
    showAlert(
        "{Confirm_Deletion}",
        "{Press_To_Delete} {Measurement}!",
        "reallyDeleteMeasurement(\"" + measurement_id + "\", \"" + measurement_index + "\")",
        "doNotDelete()"
    );
}

/* Deletes the given measurement. */
reallyDeleteMeasurement(String measurement_id, String measurement_index) {
    deleteArchEnt(measurement_id, new DeleteCallback() {
        onDelete(uuid) {
            removeContainer("Site/Measurements/measurement_row_" + measurement_index);
            removeContainer("Site/Measurements/measurement_value_container_" + measurement_index);
            removeContainer("Site/Measurements/delete_measurement_container_" + measurement_index);
            removeView("Site/Measurements/measurement_value_" + measurement_index);
            removeView("Site/Measurements/delete_measurement_" + measurement_index);
            //showTab("Site/Measurements");
        }
    });
}

doNotDelete() {
    showToast("{Delete_Cancelled}");
}

/******************************************************************************/
/*                                   PHOTOS                                   */
/******************************************************************************/
onEvent(
        "Site/Site_Recording/Take_Photo",
        "click",
        "attachPictureTo(\"Site/Site_Recording/Photos\")"
);

/******************************************************************************/
/*                                  SKETCHES                                  */
/******************************************************************************/
onEvent(
        "Site/Site_Recording/Attach_Sketch",
        "click",
        "attachFileTo(\"Site/Site_Recording/Sketches\");"
);
onEvent(
        "Site/Site_Recording/View_Sketch",
        "click",
        "viewArchEntAttachedFiles(entity_id);"
);

/******************************************************************************/
/*                                    MAP                                     */
/******************************************************************************/
onEvent("Project/Map", "show", "renderDynamicMapViews();");
onEvent("Project/Map/Centre_Map", "click", "centreMap();");
onEvent("Project/Map/Save_Map_Settings", "click", "saveMapSettings();");
//onEvent("Project/Map/Create_Shape", "click", "createShape();");

// Flag used for onShow tab redirects
//Boolean redirectFlag = false;
//navigateToMap() {
    //redirectFlag = true;
    //showTabGroup("Project");
//}

//onEvent("Project/Start", "show", "print(\"[project onShow] map redirect flag: \" + redirectFlag);if(redirectFlag){showTab(\"Project/Map\");redirectFlag=false;}");


/* Renders a plotFromMap or showMap button depending on how many points have been drawn on the map. */
// renderMapButton() {
//     executeViewTask(new ViewTask() {
//         doTask() {
//             String tabgroup = getSampleTypePath();
//             buttonDef = null;
//             print("[renderMapButton()] Rendering show map button.");     
//             buttonDef = createViewDef().createButton().setLabel("Show map");
//             createView(tabgroup + "/Basic_Info/showMap", buttonDef, tabgroup + "/Basic_Info/containerTakePoint/child2");
//             onEvent(tabgroup + "/Basic_Info/showMap", "delayclick", "arrivedFromSample=true;redirectFlag=true;showTabGroup(\"Project\");");
//         }
//     });
// }

/* Saves the sample archent with geometry equal to the single point drawn on the map. */
getPointFromMap() {
    showToast("{Not_Implemented}");
}

Boolean mapButtonRendered = false;

dataEntryLayerID = null;

/* Initialises the map. */
initMap() {
    // Base map layer
    setMapZoom("Project/Map/map", 13.0f);
    showBaseMap("Project/Map/map", "base map", "files/data/maps/SydneyStreetmap.tif");
    // showBaseMap("Project/Map/map", "base map", "files/data/maps/Capricorn.tif");

    //showBaseMap("Project/Map/map", "base map", "files/data/maps/Topo_Syd_3857.3857.Tiled.tif");
    //showRasterMap("Project/Map/map", "dem syd", "files/data/maps/dem_syd_3857.3857.Tiled.tif");
    //showRasterMap("Project/Map/map", "mag map syd", "files/data/maps/magmap_syd_3857.3857.Tiled.tif");  
    //showRasterMap("Project/Map/map", "rad map pctk syd", "files/data/maps/radmap_pctk_syd_3857.3857.Tiled.tif");
    //showRasterMap("Project/Map/map", "rad ppmu syd", "files/data/maps/rad_ppmu_syd_3857.3857.Tiled.tif");
    //showRasterMap("Project/Map/map", "rad ppmth syd", "files/data/maps/rad_ppmth_syd_3857.3857.Tiled.tif");

    ps  = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls  = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts  = createTextStyle(10, Color.BLACK, 40, Typeface.SANS_SERIF);
    
    isEntity = true;
    // Database layers
    queryName = "Site";
    querySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Site'";
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    showDatabaseLayer("Project/Map/map", "Water Samples", isEntity, queryName, querySql, ps, ls, pos, ts);

    //waterQueryName = "Water Samples";
    //waterQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Water Sample'";
    //waterps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    //showDatabaseLayer("Project/Map/map", "Water Samples", isEntity, waterQueryName, waterQuerySql, waterps, ls, pos, ts);
        
    //plantQueryName = "Plant Samples";
    //plantQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Plant Sample'";
    //plantps = createPointStyle(10, Color.GREEN, 0.2f, 0.5f);
    //showDatabaseLayer("Project/Map/map", "Plant Samples", isEntity, plantQueryName, plantQuerySql, plantps, ls, pos, ts);
    
    //soilQueryName = "Soil Samples";
    //soilQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Soil Sample'";
    //soilps = createPointStyle(10, Color.BLACK, 0.2f, 0.5f);
    //showDatabaseLayer("Project/Map/map", "Soil Samples", isEntity, soilQueryName, soilQuerySql, soilps, ls, pos, ts);
    
    //rockQueryName = "Rock Samples";
    //rockQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Rock Sample'";
    //rockps = createPointStyle(10, Color.RED, 0.2f, 0.5f);   
    //showDatabaseLayer("Project/Map/map", "Rock Samples", isEntity, rockQueryName, rockQuerySql, rockps, ls, pos, ts);
    
    //notesQueryName = "Notes";
    //notesQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Note'";
    //notesps = createPointStyle(10, Color.YELLOW, 0.2f, 0.5f);
    //notesls = createLineStyle(10, Color.YELLOW, 0.05f, 0.3f, null);
    //notespos = createPolygonStyle(10, Color.YELLOW, createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    //showDatabaseLayer("Project/Map/map", "Shape Notes", isEntity, notesQueryName, notesQuerySql, notesps, notesls, notespos, ts);
    // Canvas layers
    dataEntryLayerID = createCanvasLayer("Project/Map/map", "Data Entry Layer");
    setSelectedLayer("Project/Map/map", "Data Entry Layer");
    loadMapSettings();
    print("[initMap()] Finished Initialising the Map.");
}

/* Centres the map on the current position. */
centreMap() {
    if(!isExternalGPSOn() && !isInternalGPSOn()) {
        showToast("{GPS_Not_Initialised}");
    } else {
        centerOnCurrentPosition("Project/Map/map");
    }
}

/* Loads a map configuration file if one exists. */
loadMapSettings() {
   jsonFile = getAttachedFilePath("files/data/saved_config.json");
    if(new File(jsonFile).exists()) {
        loadMapViewConfiguration("Project/Map/map", jsonFile, "showToast(\"{Loaded_Map_Configuration}\")");
    }
}

/* Saves the current map configuration. */
saveMapSettings() {
    file = getAttachedFilePath("files/data/saved_config.json");
    saveMapViewConfiguration("Project/Map/map", file, "showToast(\"{Saved_Map_Configuration}\")");
}

//shapeUUID = null;
//onEvent("Shape/Shape_Note", "show", "saveShape();");

//[> Generates a confirmation prompt to delete the given shape note. <]
//deleteShape(String shapeID) {
    //showAlert("{Confirm_Deletion}", "{Press_To_Delete} {Shape_Note}!", "reallyDeleteShape(\"" + shapeID + "\")", "doNotDelete()");
//}

//[> Deletes the given Shape. <]
//reallyDeleteShape(String shapeID) {
    //deleteArchEnt(shapeID, new DeleteCallback() {
        //onDelete(uuid) {
            //shapeID = null;
            //shapeUUID = shapeID;
            //showToast("{Shape_Note_Deleted}");
            //navigateToMap();
        //}
    //});
//}

//[> Auto saves the shape note entity. <]
//saveShape() {
    //List geolist = getGeometryList("Project/Map/map", dataEntryLayerID);
    //print("[saveShape()] saving with geolist: " + geolist);
    //Boolean enable_autosave = true;
    //saveTabGroup("Shape", shapeUUID, geolist, null, new SaveCallback() {
        //onSave(uuid, newRecord) {
            //shapeUUID = uuid;
            //print("[saveShape()] Autosaved shape uuid: "+shapeUUID);
            //// Clear the data entry layer
            //if (newRecord && geoList != null && geolist.size() != 0) {
                //for (geom : geolist) {
                    //print("Geometry cleared:" + geom.userData.geomId);
                    //clearGeometry("Project/Map/map", geom.userData.geomId);
                //}
                //geoList = getGeometryList("Project/Map/map", dataEntryLayerID);
                //print("[saveShape()] Cleared geometry list: " + geoList);
            //}
        //}
        //onError(message) {
            //showToast(message);
        //}  
    //}, enable_autosave);
//}

//[> Saves drawn shapes with an attatched note. <]
//createShape() {
    //shapeUUID = null;
    //print("[createShape()] DataEntryLayer ID: " + dataEntryLayerID);
    //List geolist = getGeometryList("Project/Map/map", dataEntryLayerID);
    //print("[createShape()] geolist: " + geolist);
    //if (geolist == null || geolist.size() == 0) {
        //showWarning("{Warning}", "{Error_No_Shapes_Present}");
    //} else {
        //newTabGroup("Shape");
        //print("[createShape()] new shape tab group");
    //}
//}

Boolean arrivedFromSample = false;

/* Renders all the dynamic views for the map tab. */
renderDynamicMapViews() {
    print("[renderDynamicMapViews()] arrived at map from sample: " + arrivedFromSample);
    removeAllViewsAndContainers("Project");
    executeViewTask(new ViewTask() {
        doTask() {
            if (arrivedFromSample) {
                print("[renderDynamicMapViews()] arrived at map from sample.");
                arrivedFromSample = false;
                buttonDef = createViewDef().createButton().setLabel("Return to data recording and save point");
                createView("Project/Map/returnToSample", buttonDef);
                onEvent("Project/Map/returnToSample", "click", "returnToSample();");
            } else {
                print("[renderDynamicMapViews()] arrived at map from somewhere other than a sample.");
            }
        }
    });
}

// // Bind newly created geometry to a geo ID list to use later in clearing.
// ArrayList geometryIDList = new ArrayList();
// onToolEvent("Project/Map/map", "create", "onCreate()");
// onCreate() {
//     geometryIDList.add(getMapGeometryCreated());
//     print("Geometry id list: " + geometryIDList);
// }

/* Returns to the sample from the map after recording a point. */
returnToSample() {
    //String tabgroup = getSampleTypePath();
    String tabgroup = "Project";

    // Get the geometry from the data layer and proceed only if the geometry is a single point.
    List geolist = getGeometryList("Project/Map/map", dataEntryLayerID);
    print("[returnToSample()] Gemoetry List: " + geolist);
    if (geolist.size() != 1) {
        showAlert("{Alert}", "{Only_One_Point_Allowed}", "", "showTabGroup(\""+tabgroup+"\");");
        return;
    }
    boolean isPoint = false;
    if (geolist.get(0) instanceof Point) {
        isPoint = true;
    }
    if (!isPoint) {
        return;
    }

    // Save the archent with the point as the entity geometry
    entName = "Point";
    saveArchEnt(entity_id, entName, geolist, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            print("[returnToSample()] Saved geometry: " + geolist);
            fillInGPS();
            // for (Geometry geomId : geolist) {
            //     clearGeometry("Project/Map/map", geomId);
            // }
        }  
    });

    // Clear the data entry layer and return to the sample tab
    
    // clearGeometryList("Project/Map/map", geolist);
    showTabGroup(tabgroup);
}

initMap();

/******************************************************************************/
/*                                    MISC                                    */
/******************************************************************************/

saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}




// These should go in functions so we can see what's populating what.
makeVocab("CheckBoxGroup" , "Site/Site_Recording/Cultural_Material_Present" , "Cultural_Material_Present");
//makeVocab("CheckBoxGroup" , "Site/Site_Recording/Sketches"                  , "Sketches");
makeVocab("DropDown"      , "Site/Site_Recording/Current_Land_Use"          , "Current_Land_Use");
makeVocab("DropDown"      , "Site/Site_Recording/Disturbance"               , "Disturbance");
makeVocab("DropDown"      , "Site/Site_Recording/Ground_Visibility"         , "Ground_Visibility");
makeVocab("DropDown"      , "Site/Site_Recording/Landscape"                 , "Landscape");
makeVocab("DropDown"      , "Site/Site_Recording/Sampling_Method"           , "Sampling_Method");
makeVocab("DropDown"      , "Site/Site_Recording/Site_Type"                 , "Site_Type");
makeVocab("DropDown"      , "Site/Site_Recording/Surface_Geomorphology"     , "Surface_Geomorphology");
makeVocab("DropDown"      , "Site/Site_Recording/Vegetation"                , "Vegetation");
makeVocab("RadioGroup"    , "Site/Site_Recording/Site_Significance"         , "Site_Significance");
populateHierarchicalDropDown("Site/Measurements/Measurement_Type"           , "Measurement_Type");

startInternalGPS();
setSyncEnabled(true);
// onEvent("control/control/", "show", "populateControlTabGroup()");
// onEvent("control/control/buttonNewRecord",  "click", "createEntityAndPopulateBettong()");
// onEvent("control/control/savedRecords", "click", "loadEntityAndPopulateBettong()");
onEvent("Project"                             , "show"  , "removeNavigationButtons();");
onEvent("Project/Main"                        , "show"  , "populateMain(); loadSites(); ");
onEvent("Project/Main/Record_Site"            , "click" , "createNewSite(); ");
onEvent("Site"                                , "show"  , "autoSaveSite(); initNewSite(); addNavigationButtons(); ");
onEvent("Site/Photolog/Record_External_Photo" , "click" , "showTabGroup(\"Photolog\")");
onEvent("Site/Site_Recording/Take_From_GPS"   , "click" , "takePoint()");
onEvent("Users/Login"                         , "show"  , "loadUsers()");
onEvent("Users/Login/Author_List"             , "click" , "login()");

onEvent("Project/Records/All_Site_Records"    , "click" , "loadSite();");

onEvent("Site/Photolog"                       , "show"  , "loadRelatedPhotologs(entity_id)");
onEvent("Site/Photolog/Record_External_Photo" , "click" , "newPhotolog()");
onFocus("Photolog/Photolog/ID"                , null    , "savePhotolog()");
